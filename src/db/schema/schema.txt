# Enhanced Schema with Hierarchical Tasks, Scope Resolution, and Time-Based Traversal

# Generic Entity interface for polymorphic relationships
interface Entity {
  id: ID!
}

# Time-related types
type TimePoint {
  id: ID!
  timestamp: DateTime!
  entityId: String!
  entityType: String!
  eventType: TimeEventType!
  metadata: String
}

# Scope hierarchy types
type Organization implements Entity {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime
  modifiedAt: DateTime
  teams: [Team]
  projects: [Project]
  rules: [Rule]
  workflows: [Workflow]
  personas: [Persona]
}

type Team implements Entity {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime
  modifiedAt: DateTime
  organization: Organization
  users: [User]
  projects: [Project]
  rules: [Rule]
  workflows: [Workflow]
  personas: [Persona]
}

type User implements Entity {
  id: ID!
  name: String!
  email: String
  role: String
  createdAt: DateTime
  modifiedAt: DateTime
  team: Team
  rules: [Rule]
  workflows: [Workflow]
  personas: [Persona]
}

# Project updated
type Project implements Entity {
  id: ID!
  name: String!
  description: String
  rootPath: String
  createdAt: DateTime
  modifiedAt: DateTime
  organization: Organization
  team: Team
  tasks: [Task]
  rules: [Rule]
  workflows: [Workflow]
  personas: [Persona]
}

# Unified Task structure with TaskLevel
type Task implements Entity {
  id: ID!
  title: String!
  description: String
  taskLevel: TaskLevel!
  status: TaskStatus
  priority: Int
  scopeContext: String # JSON with userId, projectId, teamId, orgId
  createdAt: DateTime
  updatedAt: DateTime
  completedAt: DateTime
  project: Project
  parentTask: Task
  childTasks: [Task]
  dependencies: [Task]
  dependedOnBy: [Task]
  guidedByStep: WorkflowStep
  requirements: [Requirement]
  designSpecs: [DesignSpec]
  assignedTo: AgentInstance
}

# Deprecated but kept for backward compatibility
type SubTask implements Entity {
  id: ID!
  title: String!
  description: String
  status: TaskStatus
  type: SubTaskType
  parentTask: Task!
  dependencies: [SubTask]
  assignedRole: AgentRole
  assignedTo: AgentInstance
  createdAt: DateTime
  updatedAt: DateTime
  ckgLinks: [String]
  commandDetails: String
  codeChanges: [CodeChange]
}

# Workflow definitions
type Workflow implements Entity {
  id: ID!
  name: String!
  description: String
  appliesToTaskType: TaskLevel!
  scope: ScopeLevel!
  isActive: Boolean!
  version: String
  createdAt: DateTime
  modifiedAt: DateTime
  appliesTo: [Project]
  steps: [WorkflowStep]
}

type WorkflowStep implements Entity {
  id: ID!
  name: String!
  description: String
  stepOrder: Int!
  workflow: Workflow
  requiredRole: AgentRole
  expectedSubTaskType: SubTaskType
  isOptional: Boolean
  createdAt: DateTime
  modifiedAt: DateTime
  nextStep: WorkflowStep
  previousStep: WorkflowStep
  tasksGuidedByThisStep: [Task]
}

# Updated Agent
type AgentInstance implements Entity {
  id: ID!
  role: AgentRole!
  status: AgentStatus!
  contextSize: Int
  createdAt: DateTime!
  lastActiveAt: DateTime
  handledTasks: [Task]
  handledSubTasks: [SubTask] # For backward compatibility
  activeContext: String
}

# Rule with scope
type Rule implements Entity {
  id: ID!
  name: String!
  description: String
  ruleType: RuleType
  content: String!
  scope: ScopeLevel!
  isActive: Boolean!
  createdAt: DateTime
  modifiedAt: DateTime
  appliesTo: [Project]
  appliesForRoles: [AgentRole]
}

# Persona with scope
type Persona implements Entity {
  id: ID!
  role: AgentRole!
  description: String!
  promptTemplate: String!
  scope: ScopeLevel!
  isActive: Boolean!
  createdAt: DateTime
  modifiedAt: DateTime
  project: Project
}

# Other entities updated to implement Entity interface
type Requirement implements Entity {
  id: ID!
  title: String!
  description: String!
  task: Task
  priority: Int
  status: RequirementStatus
  createdAt: DateTime
  modifiedAt: DateTime
}

type DesignSpec implements Entity {
  id: ID!
  title: String!
  content: String!
  task: Task
  createdAt: DateTime
  updatedAt: DateTime
  approvedAt: DateTime
  approvedBy: String
}

type ArchDecision implements Entity {
  id: ID!
  title: String!
  description: String!
  rationale: String
  alternatives: String
  createdAt: DateTime
  task: Task
}

type File implements Entity {
  id: ID!
  path: String!
  content: String
  fileType: String
  lastModified: DateTime
  functions: [Function]
  classes: [Class]
  interfaces: [Interface]
}

type Function implements Entity {
  id: ID!
  name: String!
  signature: String!
  description: String
  file: File!
  calls: [Function]
  calledBy: [Function]
}

type Class implements Entity {
  id: ID!
  name: String!
  description: String
  file: File!
  implements: [Interface]
  methods: [Function]
}

type Interface implements Entity {
  id: ID!
  name: String!
  description: String
  file: File!
  implementedBy: [Class]
}

type TestPlan implements Entity {
  id: ID!
  title: String!
  description: String
  task: Task
  testCases: [TestCase]
  createdAt: DateTime
  modifiedAt: DateTime
}

type TestCase implements Entity {
  id: ID!
  title: String!
  description: String
  steps: String
  expectedResult: String
  testPlan: TestPlan
  status: TestStatus
  bugReports: [BugReport]
  createdAt: DateTime
  modifiedAt: DateTime
}

type BugReport implements Entity {
  id: ID!
  title: String!
  description: String!
  severity: BugSeverity!
  status: BugStatus!
  testCase: TestCase
  createdAt: DateTime
  resolvedAt: DateTime
  assignedTo: AgentInstance
}

type CodeChange implements Entity {
  id: ID!
  path: String!
  diff: String!
  description: String
  subTask: SubTask
  task: Task # For hierarchical structure
  createdAt: DateTime
  status: CodeChangeStatus
}

type HITLInteraction implements Entity {
  id: ID!
  type: HITLType!
  message: String!
  metadata: String
  status: HITLStatus!
  createdAt: DateTime!
  respondedAt: DateTime
  relatedTask: Task
  relatedSubTask: SubTask
}

# Enums
enum TaskLevel {
  PROJECT
  MILESTONE
  TASK
  SUBTASK
}

enum TaskStatus {
  TODO
  DECOMPOSING
  AWAITING_PLAN_REVIEW
  IN_PROGRESS
  BLOCKED
  DONE
  ERROR
}

enum SubTaskType {
  CODE
  COMMAND
  DESIGN
  REVIEW
  TEST
}

enum AgentRole {
  ORCHESTRATOR
  PRODUCT_LEAD
  DESIGN_ENGINEER
  FRONTEND_ENGINEER
  BACKEND_ENGINEER
  QA_TESTER
}

enum AgentStatus {
  IDLE
  BUSY
  ERROR
  TERMINATED
}

enum RuleType {
  CODE_STANDARD
  ARCHITECTURE
  NAMING_CONVENTION
  SECURITY
  TESTING
  WORKFLOW
}

enum ScopeLevel {
  DEFAULT
  ORG
  TEAM
  PROJECT
  USER
}

enum RequirementStatus {
  DRAFT
  APPROVED
  IMPLEMENTED
  VERIFIED
}

enum TestStatus {
  NOT_STARTED
  IN_PROGRESS
  PASSED
  FAILED
}

enum BugSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  VERIFIED
  WONT_FIX
}

enum CodeChangeStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
  MERGED
}

enum HITLType {
  PLAN_REVIEW
  COMMAND_APPROVAL
  CODE_REVIEW
  QA_SIGNOFF
  FINAL_APPROVAL
}

enum HITLStatus {
  PENDING
  APPROVED
  REJECTED
  TIMED_OUT
}

enum TimeEventType {
  CREATION
  MODIFICATION
  STATUS_CHANGE
  APPROVAL
  REJECTION
  COMPLETION
  RESOLUTION
  AGENT_ACTIVITY
  TERMINATION
  RESPONSE
}

# Define DateTime scalar type
scalar DateTime
